// ERDOS Scheduler RPC Service.
// This service is aimed for systems to schedule tasks by exploiting the
// scheduler backends and the Simulator types available in ERDOS.

syntax = "proto3";

package org.erdos.scheduler;

// The `SchedulerService` is the main service for scheduling tasks.
service SchedulerService {
    // Registers a new framework with the backend scheduler.
    // This is the entry point for a new instance of Spark / Flink to register
    // itself with the backend scheduler, and is intended as an EHLO.
    rpc RegisterFramework(RegisterFrameworkRequest) returns (RegisterFrameworkResponse) {}

    /// Deregisters the framework with the backend scheduler.
    /// This is meant for the framework to signal its intent to shut down.
    rpc DeregisterFramework(DeregisterFrameworkRequest) returns (DeregisterFrameworkResponse) {}

    /// Registers the driver with the backend scheduler.
    /// Drivers are long running entities that are allocated resources indefinitely
    /// by the backend.
    rpc RegisterDriver(RegisterDriverRequest) returns (RegisterDriverResponse) {}

    /// Deregisters the driver with the backend scheduler.
    /// This is invoked when all the applications associated with the Driver have
    /// finished their execution.
    rpc DeregisterDriver(DeregisterDriverRequest) returns (DeregisterDriverResponse) {}

    // Registers a new application with the backend scheduler.
    // This is the entry point for a new taskgraph (application) to register
    // itself with the backend scheduler, and is intended as an EHLO.
    rpc RegisterTaskGraph(RegisterTaskGraphRequest) returns (RegisterTaskGraphResponse) {}

    /// Informs the backend that the environment for the TaskGraph is ready.
    /// This RPC call enables the backend to begin considering the TaskGraph for scheduling.
    rpc RegisterEnvironmentReady(RegisterEnvironmentReadyRequest) returns (RegisterEnvironmentReadyResponse) {}

    /// Registers a new Worker with the backend scheduler.
    /// This is invoked whenever a new Worker joins the framework.
    rpc RegisterWorker(RegisterWorkerRequest) returns (RegisterWorkerResponse) {}

    /// Retrieves the scheduler's placements at a particular time.
    /// This RPC is invoked periodically by the framework along with the current timestamp
    /// and the backend scheduler informs the framework about the current allocations.
    rpc GetPlacements(GetPlacementsRequest) returns (GetPlacementsResponse) {}

    /// Notifies the Scheduler that a Task from a particular TaskGraph has completed.option
    rpc NotifyTaskCompletion(NotifyTaskCompletionRequest) returns (NotifyTaskCompletionResponse) {}
}


/// Framework related RPC structures.
/// The following structures represent the data that the framework as a whole
/// must pass to the scheduling backend. This may involve things like the URI,
/// the initialization time, and other general static information.
message RegisterFrameworkRequest {
    string name = 1;
    string uri = 2;
    uint64 timestamp = 3;
}

message RegisterFrameworkResponse {
    bool success = 1;
    string message = 2;
}

message DeregisterFrameworkRequest {
    string name = 1;
    string uri = 2;
    uint64 timestamp = 3;
}

message DeregisterFrameworkResponse {
    bool success = 1;
    string message = 2;
}

/// Driver related RPC structures.
/// The following structures represent the data that a driver must pass to the
/// scheduling backend. This may involve things like the name of the driver, the
/// URI, the number of resources required by the driver, and other general
/// information.
message RegisterDriverRequest {
    string id = 1;
    string uri = 2;
    int32 cores = 3;
    int32 memory = 4;
    uint64 timestamp = 5;
}

message RegisterDriverResponse {
    bool success = 1;
    string message = 2;
    // The following fields are used to communicate the worker that the driver
    // has been scheduled on.
    string worker_id = 3;
}

message DeregisterDriverRequest {
    string id = 1;
    uint64 timestamp = 2;
}

message DeregisterDriverResponse {
    bool success = 1;
    string message = 2;
}

/// Application related RPC structures.
/// The following structures represent the data that an application (TaskGraph)
/// must pass to the scheduling backend.
message Task {
    uint32 id = 1;
    string name = 2;
}

message TaskDependencies {
    Task key = 1;
    repeated uint32 children_ids = 2;
}

message RegisterTaskGraphRequest {
    string id = 1;
    string name = 2;
    uint64 timestamp = 3;
    repeated TaskDependencies dependencies = 4;
    int32 deadline = 5;
}

message RegisterTaskGraphResponse {
    bool success = 1;
    string message = 2;
    // Respond to the driver with how many executors it should request initially
    // from the Master.
    uint32 num_executors = 3;
}

message RegisterEnvironmentReadyRequest {
    /// The ID of the Application / TaskGraph that is ready for scheduling.
    string id = 1;
    /// The number of executors that were registered to be ready.
    uint32 num_executors = 2;
    /// The timestamp at which the environment was considered ready.
    uint64 timestamp = 3;
}

message RegisterEnvironmentReadyResponse {
    bool success = 1;
    string message = 2;
}

message NotifyTaskCompletionRequest {
    string application_id = 1;
    uint32 task_id = 2;
    uint64 timestamp = 3;
}

message NotifyTaskCompletionResponse {
    bool success = 1;
    string message = 2;
}

/// Worker related RPC structures.
/// The following structures represent the data that a Worker's addition to the
/// framework must pass to the scheduling backend. This may involve things like
/// the name of the Worker, the URI, the number of resources available to the
/// Worker, and other general static information.
message RegisterWorkerRequest {
    string name = 1;
    string id = 2;
    int32 cores = 3;
    int32 memory = 4;
}

message RegisterWorkerResponse {
    bool success = 1;
    string message = 2;
    // The RPC backend informs the Master what the worker's intended resources
    // should be. This is used to allow the Master to allow us to spawn executors
    // more than the actual resources available in the machine would allow.
    int32 cores = 3;
    int32 memory = 4;
}

message GetPlacementsRequest {
    uint64 timestamp = 1;
    string id = 2;
}

message Placement {
    string worker_id = 1;
    string application_id = 2;
    uint32 task_id = 3;
    uint32 cores = 4;
}

message GetPlacementsResponse {
    bool success = 1;
    repeated Placement placements = 2;
    string message = 3;
}
